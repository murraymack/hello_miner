#!/bin/bash

while (( "$#" )); do
  case "$1" in
    -p|--ping)
      PING_NETWORK=1
      shift
      ;;
    -l|--last)
      LAST_REPORT=1
      shift
      ;;
    -h|--hash)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        HASH_CON=$2
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        exit 1
      fi
      ;;
    -c|--count)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        COUNT_CON=$2
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        exit 1
      fi
      ;;
    -stop|--stop)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        STOP_CON=$2
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        exit 1
      fi
      ;;
    -start|--start)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        START_CON=$2
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        exit 1
      fi
      ;;
    -*|--*=) # unsupported flags
      echo "Error: Unsupported flag $1" >&2
      exit 1
      ;;
    *) # preserve positional arguments
      PARAMS="$PARAMS $1"
      shift
      ;;
  esac
done

eval set -- "$PARAMS"

DIR_SOURCE="/home/murphinator/hello_miner/"
DIR_LOGS="/home/murphinator/hello_miner/logs/"

LIST_PRESETS="ALL|GEN1|GEN2|PC01|PC02|PC03|PC04|PC05|PC06|PC07|PC08|PC09|PC10|PC11|PC12"
GEN1="CON01,CON02,CON03,CON04,CON05,CON06,CON07,CON08,CON09,CON10,CON11,CON12,CON13,CON14,CON15,CON16,CON17,CON18,CON19,CON20,CON21,CON22,CON23,CON24,CON25,CON26,CON27,CON28,CON29,CON30,CON31"
GEN2="CON32,CON33,CON34,CON35,CON36,CON37,CON38,CON39,CON40,CON41,CON42,CON43,CON44,CON45,CON46,CON47,CON48,CON49,CON50,CON51,CON52,CON53"
PC01="CON01,CON02,CON03,CON04"
PC02="CON05,CON06,CON07,CON08,CON09"
PC03="CON10,CON11,CON12,CON13"
PC04="CON14,CON15,CON16,CON17,CON18"
PC05="CON19,CON20,CON21,CON22"
PC06="CON23,CON24,CON25,CON26,CON27"
PC07="CON28,CON29,CON30,CON31"
PC08="CON32,CON33,CON34,CON35"
PC09="CON36,CON37,CON38,CON39,CON40"
PC10="CON41,CON42,CON43,CON44"
PC11="CON45,CON46,CON47,CON48,CON49"
PC12="CON50,CON51,CON52,CON53"
ALL="${GEN1},${GEN2}"

REPORT_DIR="${DIR_LOGS}last.txt"
COUNT_CON_IP=$(grep -w "$COUNT_CON" "$REPORT_DIR" | grep -oE "[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+")
HASH_CON_IP=$(grep -w "$HASH_CON" "$REPORT_DIR" | grep -oE "[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+")
TEMP_CON_IP=$(grep -w "$TEMP_CON" "$REPORT_DIR" | grep -oE "[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+")
CGSTATS="cgminer-api -o stats"
MINER_COUNT="$CGSTATS | grep -oE 'Temp\[[[:digit:]]+\]' | grep -oE 'Temp' -c"

MYDATE=$(date "+%Y-%m-%d-%s")

echo $MYDATE


# Ping the OpenVPN Network if flag -p or --ping
if [[ $PING_NETWORK == 1 ]];
then
  date
  echo "Starting Ping Refresh"
    for ip in 192.168.168.{3..253}
    do
      fping -t 600 $ip > /dev/null 2>&1 &
    done
    wait
  echo "Ping Refresh Complete"
fi


# Print last report if it exists
if [[ $LAST_REPORT == 1 ]];
then
   cat $REPORT_DIR || echo "Error! Last report not found." exit 1
   exit 0
fi


# Check if -c or --count argument is contained in the preset list $PRESET_LIST,
# If true, then re-assign --count variable ($COUNT_CON) to the corresponding preset
if [[ "$COUNT_CON" =~ ^($LIST_PRESETS)$ ]];
then
     TEMP_COUNT=$(echo $LIST_PRESETS | grep -oE "$COUNT_CON")
     COUNT_CON=${!TEMP_COUNT}
fi

# Function to generate log string for Count of miners via ssh
get_count () {
  ssh -o ConnectTimeout=10 -o "StrictHostKeyChecking no" -o "BatchMode yes" root@"$COUNT_CON_IP" "MYCON=\$(cat /etc/config/network | grep -oE 'CON[[:digit:]]+'); LOCAL_MINER_COUNT=\$($MINER_COUNT); \
  printf \"$DATE_STR,\$MYCON,Count,\${LOCAL_MINER_COUNT}\\n\""; \
  }


# Remove old temporary output of --count call if it exists
#
[[ ! -f ${DIR_LOGS}Count_Out.txt ]] || rm ${DIR_LOGS}Count_Out.txt


# If Agg Count Log does not exist, create it
#
[[ ! -f ${DIR_LOGS}Count_Log_Agg.txt ]] || touch ${DIR_LOGS}Count_Log_Agg.txt


# If -c or --count argument exists, loop through corresponding preset list and save output
#
if [[ ${#COUNT_CON} -gt 0 ]];
then
   COUNT_LIST="${DIR_LOGS}count_list"
   echo "$COUNT_CON" | awk -F',' '{for(i=1;i<=NF;i++){print $i}}' > "$COUNT_LIST"
   for x in $(cat "$COUNT_LIST")
   do
      DATE_STR=$(date "+%Y-%m-%d-%s")
      COUNT_CON_IP=$(grep -w "$x" "$REPORT_DIR" | grep -oE '[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+')
      get_count &
   done >> ${DIR_LOGS}Count_Out.txt
   wait
   sort ${DIR_LOGS}Count_Out.txt >> ${DIR_LOGS}Count_Log.txt
   sort ${DIR_LOGS}Count_Out.txt

   TODAY_COUNT=$(awk -F',' -v DATE="$DATE_STR" '$1 ~ date {sum+=$4;} END {print sum;}' ${DIR_LOGS}Count_Out.txt)
   echo "${DATE_STR} Current Count: $TODAY_COUNT"

fi


# Check if -h or --hash argument is contained in the preset list $PRESET_LIST,
# If true, then re-assign --hash variable ($HASH_CON) to the corresponding preset
if [[ "$HASH_CON" =~ ^($LIST_PRESETS)$ ]];
then
     TEMP_COUNT=$(echo $LIST_PRESETS | grep -oE "$HASH_CON")
     HASH_CON=${!TEMP_COUNT}
fi

GHS_LIST="grep -oEw 'GHSmm\[[[:digit:]]+\.[[:digit:]]+\]' | grep -oEw '[[:digit:]]+\.[[:digit:]]+'"
GHS_AVG="$GHS_LIST | awk '{ SUM += \$1; n++ } END { if (n > 0) print SUM / n; }'"
GHS_BOTk="$GHS_LIST | sort -nk 2 | head -n 5"
DNA_LIST="grep -oEw 'DNA\[[[:alnum:]]+\]' | grep -oEw '[[:alnum:]]+\]' | sed 's/\]//g'"
TEMP_LIST="grep -oEw 'Temp\[[[:digit:]]+\]' | grep -oEw '[[:digit:]]+\]' | sed 's/\]//g'"

# Function to generate log string for Count of miners via ssh
get_hash () {
  ssh -o ConnectTimeout=10 -o "StrictHostKeyChecking no" -o "BatchMode yes" root@"$HASH_CON_IP" \
  "MYCON=\$(cat /etc/config/network | grep -oE 'CON[[:digit:]]+'); $CGSTATS > \/tmp\/LOCAL_STATS; \
  cat /tmp/LOCAL_STATS | $DNA_LIST > /tmp/LOCAL_DNA_LIST; \
  sed 's/^/dna,/g' /tmp/LOCAL_DNA_LIST > /tmp/LOCAL_DNA_OUT; \
  cat /tmp/LOCAL_STATS | $GHS_LIST > /tmp/LOCAL_GHS_LIST; \
  sed 's/^/hash\(GH\/s\),/g' /tmp/LOCAL_GHS_LIST > /tmp/LOCAL_GHS_OUT; \
  cat /tmp/LOCAL_STATS | $TEMP_LIST > /tmp/LOCAL_TEMP_LIST; \
  sed 's/^/temp,/g' /tmp/LOCAL_TEMP_LIST > \/tmp\/LOCAL_TEMP_OUT; \
  awk '{printf (\"%s,\", $0); getline < \"/tmp/LOCAL_GHS_OUT\"; printf (\"%s,\", $0); getline < \"/tmp/LOCAL_TEMP_OUT\"; print $0 }' /tmp/LOCAL_DNA_OUT > LOCAL_OUT; \
  for x in \$(cat /tmp/LOCAL_GHS_LIST)
  do
    printf \"$DATE_STR,\$MYCON,\$x\\n\"
  done;"
  }

# If -h or --hash argument exists, loop through corresponding preset list and save output
if [[ ${#HASH_CON} -gt 0 ]];
then
   HASH_LIST="${DIR_LOGS}hash_list"
   echo "$HASH_CON" | awk -F',' '{for(i=1;i<=NF;i++){print $i}}' > "$HASH_LIST"
   for x in $(cat "$HASH_LIST")
   do
      DATE_STR=$(date "+%Y-%m-%d-%s")
      HASH_CON_IP=$(grep -w "$x" "$REPORT_DIR" | grep -oE '[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+')
      get_hash &
   done >> ${DIR_LOGS}Hash_Out.txt
   wait
   sort ${DIR_LOGS}Hash_Out.txt >> ${DIR_LOGS}Hash_Log.txt
   sort ${DIR_LOGS}Hash_Log.txt

   #TODAY_HASH=$(awk -F',' -v DATE="$DATE_STR" '$1 ~ date {sum+=$4;} END {print sum;}' ${DIR_LOGS}Hash_Out.txt)
   #echo "${DATE_STR} Current Count: $TODAY_HASH"

fi
